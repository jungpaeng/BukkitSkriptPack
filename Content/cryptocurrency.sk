options:
  Prefix: &8[&cCryptocurrency&8]&f
  CryptoMarketDisplayName: "&f[&3Crypto Market&f]"
  CryptoMarketBuyDisplayName: "&f[&3Buy Crypto Coin&f]"
  CryptoMarketSellDisplayName: "&f[&3Cell Crypto Coin&f]"

  ExchangeRate: 1174
  Commission: 0.9975

  playerInfoDB: data.%uuid of player%.playerData

on load:
  clear {cryptocurrency-list::*}
  clear {cryptocurrency-data::*}
  clear {cryptocurrency.selected.coin::*}
  clear {cryptocurrency.buy.maxcrypto::*}
  clear {trade.market.trade.inventory::*}

  add "Bitcoin" to {cryptocurrency-list::*}
  add "Ethereum" to {cryptocurrency-list::*}
  add "EOS" to {cryptocurrency-list::*}

  fetchCryptoCurrencyData()

on unload:
  delete {cryptocurrency-list::*}
  delete {cryptocurrency-data::*}
  delete {cryptocurrency.selected.coin::*}
  delete {cryptocurrency.buy.maxcrypto::*}
  delete {trade.market.trade.inventory::*}

every 20 seconds:
  fetchCryptoCurrencyData()

on join:
  loop {cryptocurrency-list::*}:
    if {{@playerInfoDB}::cryptocurrency.%loop-value%} is not set:
      set {{@playerInfoDB}::cryptocurrency.%loop-value%} to 0

command /cryptocurrency [<text>] [<text>] [<number>] [<text>]:
  trigger:
    if arg-1 is "help":
      send "&8&m----------------&r &6✎ &e&lCryptocurrency&r &6✐ &8&m----------------"
      send "&7• &a/cryptocurrency buy [Coin] [Amount] &7(코인 구매)"
      send "&7"
      send "&7• &a/cryptocurrency sell [Coin] [Amount] &7(코인 판매)"
      send "&7"
      send "&7• &a/cryptocurrency pay [Coin] [Amount] [Player] &7(코인 전송 - 개발 중)"
      send "&7"
      send "&7• &a/cryptocurrency shop &7(코인 거래소)"
    else if arg-1 is "buy":
      # 코인의 이름이 누락되어 있는 경우
      if arg-2 is not set:
        send "{@Prefix} &c코인의 이름을 입력해주세요."
        send "&a%{cryptocurrency-list::*}%"
        stop
      # 존재하지 않는 코인의 이름을 입력한 경우
      if {cryptocurrency-list::*} does not contain arg 2:
        send "{@Prefix} &c유효한 코인의 이름을 입력해주세요."
        send "&a%{cryptocurrency-list::*}%"
        stop
      # 구매할 코인의 개수가 누락되어 있는 경우
      if arg-3 is not set:
        make player execute command "/cryptocurrency help"
        stop
      # 구매할 코인의 개수가 1보다 적은 경우
      if arg-3 < 1:
        send "{@Prefix} &c구매할 수 없습니다."
        stop

      set {_oneAmount} to round ({cryptocurrency-data::%arg-2%::1::price_usd} parsed as number * {@ExchangeRate})
      set {_amount} to {_oneAmount} * arg-3
      
      # 소지한 금액이 부족한 경우
      if {{@playerInfoDB}::money} < {_amount}:
        send "{@Prefix} &c소지한 금액이 부족합니다."
        stop

      remove {_amount} from {{@playerInfoDB}::money}
      add arg 3 to {{@playerInfoDB}::cryptocurrency.%arg-2%}

      set {cryptocurrency.buy.maxcrypto::%player%} to round down ({data.%uuid of player%.playerData::money}/{_oneAmount})
      set slot 17 of {trade.market.trade.inventory::%player%} to chest named "&f[&a&l최대 수량 구매&f]" with lore "&eCoin: &7%arg-2%", "&eAmount: &7Max (&e%getMoneyUnit({cryptocurrency.buy.maxcrypto::%player%})%&7)" and "&ePrice: &7$%getMoneyUnit({_oneAmount} * {cryptocurrency.buy.maxcrypto::%player%})%"

      broadcast "{@Prefix} <light green>%player%&7님이 &6%getMoneyUnit({_amount})%&7원을 사용하여 &6%getMoneyUnit(arg-3)%&7개의 &6%arg-2%&7을/를 구매하였습니다!"
    else if arg-1 is "sell":
      # 코인의 이름이 누락되어 있는 경우
      if arg-2 is not set:
        send "{@Prefix} &c코인의 이름을 입력해주세요."
        send "&a%{cryptocurrency-list::*}%"
        stop
      # 존재하지 않는 코인의 이름을 입력한 경우
      if {cryptocurrency-list::*} does not contain arg 2:
        send "{@Prefix} &c유효한 코인의 이름을 입력해주세요."
        send "&a%{cryptocurrency-list::*}%"
        stop
      # 판매할 코인의 개수가 누락되어 있는 경우
      if arg-3 is not set:
        make player execute command "/cryptocurrency help"
        stop
      # 판매할 코인의 개수가 1보다 적은 경우
      if arg-3 < 1:
        send "{@Prefix} &c판매할 수 없습니다."
        stop
      
      # 소지한 코인이 부족한 경우
      if {{@playerInfoDB}::cryptocurrency.%arg-2%} < arg-3:
        send "{@Prefix} &c소지한 코인이 부족합니다."
        stop

      set {_oneAmount} to round ({cryptocurrency-data::%arg-2%::1::price_usd} parsed as number * {@ExchangeRate} * {@Commission})
      set {_amount} to {_oneAmount} * arg-3
        
      remove arg 3 from {{@playerInfoDB}::cryptocurrency.%arg-2%}
      add {_amount} to {{@playerInfoDB}::money}

      set slot 17 of {trade.market.trade.inventory::%player%} to chest named "&f[&a&l최대 수량 판매&f]" with lore "&eCoin: &7%arg-2%", "&eAmount: &7Max (&e%getMoneyUnit({data.%uuid of player%.playerData::cryptocurrency.%arg-2%})%&7)" and "&ePrice: &7$%getMoneyUnit({_oneAmount} * {data.%uuid of player%.playerData::cryptocurrency.%arg-2%})%"
      broadcast "{@Prefix} <light green>%player%&7님이 &6%getMoneyUnit(arg-3)%&7개의 &6%arg-2%&7을/를 &6%getMoneyUnit({_amount})%&7원에 판매하였습니다!"
    else if arg-1 is "shop":
      wait 2 ticks
      set {_trade.market.inventory} to chest inventory with 6 rows named {@CryptoMarketDisplayName}
      set slots integers between 0 and 9 of {_trade.market.inventory} to white glass named "&a"
      set slots integers between 17 and 18 of {_trade.market.inventory} to white glass named "&a"
      set slots integers between 26 and 27 of {_trade.market.inventory} to white glass named "&a"
      set slots integers between 35 and 36 of {_trade.market.inventory} to white glass named "&a"
      set slots integers between 44 and 53 of {_trade.market.inventory} to white glass named "&a"

      wait 1 tick
      set {_bitcoin.buyAmount} to round ({cryptocurrency-data::bitcoin::1::price_usd} parsed as number * {@ExchangeRate})
      set {_bitcoin.sellAmount} to round ({cryptocurrency-data::bitcoin::1::price_usd} parsed as number * {@ExchangeRate} * {@Commission})
      set {_ethereum.buyAmount} to round ({cryptocurrency-data::ethereum::1::price_usd} parsed as number * {@ExchangeRate})
      set {_ethereum.buyAmount} to round ({cryptocurrency-data::ethereum::1::price_usd} parsed as number * {@ExchangeRate})
      set {_ethereum.sellAmount} to round ({cryptocurrency-data::ethereum::1::price_usd} parsed as number * {@ExchangeRate} * {@Commission})
      set {_eos.buyAmount} to round ({cryptocurrency-data::eos::1::price_usd} parsed as number * {@ExchangeRate})
      set {_eos.sellAmount} to round ({cryptocurrency-data::eos::1::price_usd} parsed as number * {@ExchangeRate} * {@Commission})
      
      if {cryptocurrency-data::bitcoin::1::percent_change_24h} parsed as a number is less than 0:
        set slot 10 of {_trade.market.inventory} to sunflower named "&e%{cryptocurrency-data::bitcoin::1::symbol}% &7(&c%{cryptocurrency-data::bitcoin::1::percent_change_24h}%%%&7)" with lore "&7%{cryptocurrency-data::bitcoin::1::name}% &7┋ &aRank ##%{cryptocurrency-data::bitcoin::1::rank}%", "&8소유 코인: &a%{{@playerInfoDB}::cryptocurrency.bitcoin}% &8┋ &a$%getMoneyUnit({_bitcoin.buyAmount} * {{@playerInfoDB}::cryptocurrency.bitcoin})%", "&8Price: &a$%getMoneyUnit({_bitcoin.buyAmount})%", "&8SellPrice: &a$%getMoneyUnit({_bitcoin.sellAmount})%", "&8판매 수수료: &a%1 - {@Commission}%", "" and "&a[좌클릭] 코인 구매", "&c[우클릭] 코인 판매"
      if {cryptocurrency-data::bitcoin::1::percent_change_24h} parsed as a number is greater than or equal to 0:
        set slot 10 of {_trade.market.inventory} to sunflower named "&e%{cryptocurrency-data::bitcoin::1::symbol}% &7(&a+%{cryptocurrency-data::bitcoin::1::percent_change_24h}%%%&7)" with lore "&7%{cryptocurrency-data::bitcoin::1::name}% &7┋ &aRank ##%{cryptocurrency-data::bitcoin::1::rank}%", "&8소유 코인: &a%{{@playerInfoDB}::cryptocurrency.bitcoin}% &8┋ &a$%getMoneyUnit({_bitcoin.buyAmount} * {{@playerInfoDB}::cryptocurrency.bitcoin})%", "&8Price: &a$%getMoneyUnit({_bitcoin.buyAmount})%", "&8SellPrice: &a$%getMoneyUnit({_bitcoin.sellAmount})%", "&8판매 수수료: &a%1 - {@Commission}%", "" and "&a[좌클릭] 코인 구매", "&c[우클릭] 코인 판매"
      if {cryptocurrency-data::ethereum::1::percent_change_24h} parsed as a number is less than 0:
        set slot 11 of {_trade.market.inventory} to gray dye named "&e%{cryptocurrency-data::ethereum::1::symbol}% &7(&c%{cryptocurrency-data::ethereum::1::percent_change_24h}%%%&7)" with lore "&7%{cryptocurrency-data::ethereum::1::name}% &7┋ &aRank ##%{cryptocurrency-data::ethereum::1::rank}%", "&8소유 코인: &a%{{@playerInfoDB}::cryptocurrency.ethereum}% &8┋ &a$%getMoneyUnit({_ethereum.buyAmount} * {{@playerInfoDB}::cryptocurrency.ethereum})%", "&8Price: &a$%getMoneyUnit({_ethereum.buyAmount})%", "&8SellPrice: &a$%getMoneyUnit({_ethereum.sellAmount})%", "&8판매 수수료: &a%1 - {@Commission}%", "" and "&a[좌클릭] 코인 구매", "&c[우클릭] 코인 판매"
      if {cryptocurrency-data::ethereum::1::percent_change_24h} parsed as a number is greater than or equal to 0:
        set slot 11 of {_trade.market.inventory} to gray dye named "&e%{cryptocurrency-data::ethereum::1::symbol}% &7(&a+%{cryptocurrency-data::ethereum::1::percent_change_24h}%%%&7)" with lore "&7%{cryptocurrency-data::ethereum::1::name}% &7┋ &aRank ##%{cryptocurrency-data::ethereum::1::rank}%", "&8소유 코인: &a%{{@playerInfoDB}::cryptocurrency.ethereum}% &8┋ &a$%getMoneyUnit({_ethereum.buyAmount} * {{@playerInfoDB}::cryptocurrency.ethereum})%", "&8Price: &a$%getMoneyUnit({_ethereum.buyAmount})%", "&8SellPrice: &a$%getMoneyUnit({_ethereum.sellAmount})%", "&8판매 수수료: &a%1 - {@Commission}%", "" and "&a[좌클릭] 코인 구매", "&c[우클릭] 코인 판매"
      if {cryptocurrency-data::eos::1::percent_change_24h} parsed as a number is less than 0:
        set slot 12 of {_trade.market.inventory} to black dye named "&e%{cryptocurrency-data::eos::1::symbol}% &7(&c%{cryptocurrency-data::eos::1::percent_change_24h}%%%&7)" with lore "&7%{cryptocurrency-data::eos::1::name}% &7┋ &aRank ##%{cryptocurrency-data::eos::1::rank}%", "&8소유 코인: &a%{{@playerInfoDB}::cryptocurrency.eos}% &8┋ &a$%getMoneyUnit({_eos.buyAmount} * {{@playerInfoDB}::cryptocurrency.eos})%", "&8Price: &a$%getMoneyUnit({_eos.buyAmount})%", "&8SellPrice: &a$%getMoneyUnit({_eos.sellAmount})%", "&8판매 수수료: &a%1 - {@Commission}%", "" and "&a[좌클릭] 코인 구매", "&c[우클릭] 코인 판매"
      if {cryptocurrency-data::eos::1::percent_change_24h} parsed as a number is greater than or equal to 0:
        set slot 12 of {_trade.market.inventory} to black dye named "&e%{cryptocurrency-data::eos::1::symbol}% &7(&a+%{cryptocurrency-data::eos::1::percent_change_24h}%%%&7)" with lore "&7%{cryptocurrency-data::eos::1::name}% &7┋ &aRank ##%{cryptocurrency-data::eos::1::rank}%", "&8소유 코인: &a%{{@playerInfoDB}::cryptocurrency.eos}% &8┋ &a$%getMoneyUnit({_eos.buyAmount} * {{@playerInfoDB}::cryptocurrency.eos})%", "&8Price: &a$%getMoneyUnit({_eos.buyAmount})%", "&8SellPrice: &a$%getMoneyUnit({_eos.sellAmount})%", "&8판매 수수료: &a%1 - {@Commission}%", "" and "&a[좌클릭] 코인 구매", "&c[우클릭] 코인 판매"
      wait 1 tick
      open {_trade.market.inventory} to player
    else:
      make player execute command "/cryptocurrency help"

on inventory click:
  if inventory name is {@CryptoMarketDisplayName}:
    cancel event
    
    if clicked slot is 10:
      if clicked type is left mouse button:
        buyCryptocurrency("Bitcoin", player)
      else if clicked type is right mouse button:
        sellCryptocurrency("Bitcoin", player)
    if clicked slot is 11:
      if clicked type is left mouse button:
        buyCryptocurrency("Ethereum", player)
      else if clicked type is right mouse button:
        sellCryptocurrency("Ethereum", player)
    if clicked slot is 12:
      if clicked type is left mouse button:
        buyCryptocurrency("EOS", player)
      else if clicked type is right mouse button:
        sellCryptocurrency("EOS", player)
  else if inventory name is {@CryptoMarketBuyDisplayName}:
    cancel event
    set {_coin.amount} to round ({cryptocurrency-data::%{cryptocurrency.selected.coin::%player%}%::1::price_usd} parsed as number * {@ExchangeRate})

    if clicked slot is 10:
      make player execute command "/cryptocurrency buy %{cryptocurrency.selected.coin::%player%}% 1"
    if clicked slot is 11:
      make player execute command "/cryptocurrency buy %{cryptocurrency.selected.coin::%player%}% 2"
    if clicked slot is 12:
      make player execute command "/cryptocurrency buy %{cryptocurrency.selected.coin::%player%}% 4"
    if clicked slot is 13:
      make player execute command "/cryptocurrency buy %{cryptocurrency.selected.coin::%player%}% 8"
    if clicked slot is 14:
      make player execute command "/cryptocurrency buy %{cryptocurrency.selected.coin::%player%}% 16"
    if clicked slot is 15:
      make player execute command "/cryptocurrency buy %{cryptocurrency.selected.coin::%player%}% 32"
    if clicked slot is 16:
      make player execute command "/cryptocurrency buy %{cryptocurrency.selected.coin::%player%}% 64"
    if clicked slot is 17:
      make player execute command "/cryptocurrency buy %{cryptocurrency.selected.coin::%player%}% %{cryptocurrency.buy.maxcrypto::%player%}%"
  else if inventory name is {@CryptoMarketSellDisplayName}:
    cancel event
    set {_coin.amount} to round ({cryptocurrency-data::%{cryptocurrency.selected.coin::%player%}%::1::price_usd} parsed as number * {@ExchangeRate} * {@Commission})

    if clicked slot is 10:
      make player execute command "/cryptocurrency sell %{cryptocurrency.selected.coin::%player%}% 1"
    if clicked slot is 11:
      make player execute command "/cryptocurrency sell %{cryptocurrency.selected.coin::%player%}% 2"
    if clicked slot is 12:
      make player execute command "/cryptocurrency sell %{cryptocurrency.selected.coin::%player%}% 4"
    if clicked slot is 13:
      make player execute command "/cryptocurrency sell %{cryptocurrency.selected.coin::%player%}% 8"
    if clicked slot is 14:
      make player execute command "/cryptocurrency sell %{cryptocurrency.selected.coin::%player%}% 16"
    if clicked slot is 15:
      make player execute command "/cryptocurrency sell %{cryptocurrency.selected.coin::%player%}% 32"
    if clicked slot is 16:
      make player execute command "/cryptocurrency sell %{cryptocurrency.selected.coin::%player%}% 64"
    if clicked slot is 17:
      send "%{data.%uuid of player%.playerData::cryptocurrency.%{cryptocurrency.selected.coin::%player%}%}%" to console
      make player execute command "/cryptocurrency sell %{cryptocurrency.selected.coin::%player%}% %{data.%uuid of player%.playerData::cryptocurrency.%{cryptocurrency.selected.coin::%player%}%}%"

function fetchCryptoCurrencyData():
  loop {cryptocurrency-list::*}:
    wait 5 tick

    send a request to "https://api.coinmarketcap.com/v1/ticker/%loop-value%/"
    copy json last http response's body to {cryptocurrency-data::%loop-value%::*}

function buyCryptocurrency(coin: text, p: player):
  wait 2 ticks
  set {cryptocurrency.selected.coin::%{_p}%} to {_coin}

  set {trade.market.trade.inventory::%{_p}%} to chest inventory with 3 rows named {@CryptoMarketBuyDisplayName}
  set slots integers between 0 and 9 of {trade.market.trade.inventory::%{_p}%} to white glass named "&a"
  set {_coin.amount} to round ({cryptocurrency-data::%{_coin}%::1::price_usd} parsed as number * {@ExchangeRate})

  set slot 10 of {trade.market.trade.inventory::%{_p}%} to iron nugget named "&f[&a&l구매&f]" with lore "&eCoin: &7%{_coin}%", "&eAmount: &71" and "&ePrice: &7$%getMoneyUnit({_coin.amount} * 1)%"
  set slot 11 of {trade.market.trade.inventory::%{_p}%} to 2 iron nugget named "&f[&a&l구매&f]" with lore "&eCoin: &7%{_coin}%", "&eAmount: &72" and "&ePrice: &7$%getMoneyUnit({_coin.amount} * 2)%"
  set slot 12 of {trade.market.trade.inventory::%{_p}%} to 4 iron nugget named "&f[&a&l구매&f]" with lore "&eCoin: &7%{_coin}%", "&eAmount: &74" and "&ePrice: &7$%getMoneyUnit({_coin.amount} * 4)%"
  set slot 13 of {trade.market.trade.inventory::%{_p}%} to 8 iron nugget named "&f[&a&l구매&f]" with lore "&eCoin: &7%{_coin}%", "&eAmount: &78" and "&ePrice: &7$%getMoneyUnit({_coin.amount} * 8)%"
  set slot 14 of {trade.market.trade.inventory::%{_p}%} to 16 iron nugget named "&f[&a&l구매&f]" with lore "&eCoin: &7%{_coin}%", "&eAmount: &716" and "&ePrice: &7$%getMoneyUnit({_coin.amount} * 16)%"
  set slot 15 of {trade.market.trade.inventory::%{_p}%} to 32 iron nugget named "&f[&a&l구매&f]" with lore "&eCoin: &7%{_coin}%", "&eAmount: &732" and "&ePrice: &7$%getMoneyUnit({_coin.amount} * 32)%"
  set slot 16 of {trade.market.trade.inventory::%{_p}%} to 64 iron nugget named "&f[&a&l구매&f]" with lore "&eCoin: &7%{_coin}%", "&eAmount: &764" and "&ePrice: &7$%getMoneyUnit({_coin.amount} * 64)%"
  set slots integers between 18 and 26 of {trade.market.trade.inventory::%{_p}%} to white glass named "&a"

  set {_pu} to uuid of {_p}
  set {cryptocurrency.buy.maxcrypto::%{_p}%} to round down ({data.%{_pu}%.playerData::money}/{_coin.amount})

  set slot 17 of {trade.market.trade.inventory::%{_p}%} to chest named "&f[&a&l최대 수량 구매&f]" with lore "&eCoin: &7%{_coin}%", "&eAmount: &7Max (&e%getMoneyUnit({cryptocurrency.buy.maxcrypto::%{_p}%})%&7)" and "&ePrice: &7$%getMoneyUnit({_coin.amount} * {cryptocurrency.buy.maxcrypto::%{_p}%})%"
  if {cryptocurrency-data::%{_coin}%::1::percent_change_24h} parsed as a number is less than 0:
    set slot 9 of {trade.market.trade.inventory::%{_p}%} to a Paper named "&e%{cryptocurrency-data::%{_coin}%::1::symbol}% &7(&c%{cryptocurrency-data::%{_coin}%::1::percent_change_24h}%%%&7)" with lore "&e%{cryptocurrency-data::%{_coin}%::1::name}% &7┋ &aRank ##%{cryptocurrency-data::%{_coin}%::1::rank}%", "&8소유 코인: &a%getMoneyUnit({data.%{_pu}%.playerData::cryptocurrency.%{_coin}%})% &8┋ &a$%getMoneyUnit({data.%{_pu}%.playerData::cryptocurrency.%{_coin}%} * {_coin.amount})%" and "&8Price: &a$%getMoneyUnit({_coin.amount})%"
  if {cryptocurrency-data::%{_coin}%::1::percent_change_24h} parsed as a number is greater than or equal to 0:
    set slot 9 of {trade.market.trade.inventory::%{_p}%} to a Paper named "&e%{cryptocurrency-data::%{_coin}%::1::symbol}% &7(&a+%{cryptocurrency-data::%{_coin}%::1::percent_change_24h}%%%&7)" with lore "&e%{cryptocurrency-data::%{_coin}%::1::name}% &7┋ &aRank ##%{cryptocurrency-data::%{_coin}%::1::rank}%", "&8소유 코인: &a%getMoneyUnit({data.%{_pu}%.playerData::cryptocurrency.%{_coin}%})% &8┋ &a$%getMoneyUnit({data.%{_pu}%.playerData::cryptocurrency.%{_coin}%} * {_coin.amount})%" and "&8Price: &a$%getMoneyUnit({_coin.amount})%"

  wait 1 tick
  open {trade.market.trade.inventory::%{_p}%} to {_p}
  
function sellCryptocurrency(coin: text, p: player):
  wait 2 ticks
  set {cryptocurrency.selected.coin::%{_p}%} to {_coin}

  set {trade.market.trade.inventory::%{_p}%} to chest inventory with 3 rows named {@CryptoMarketSellDisplayName}
  set slots integers between 0 and 9 of {trade.market.trade.inventory::%{_p}%} to white glass named "&a"
  set {_coin.amount} to round ({cryptocurrency-data::%{_coin}%::1::price_usd} parsed as number * {@ExchangeRate} * {@Commission})

  set slot 10 of {trade.market.trade.inventory::%{_p}%} to iron nugget named "&f[&a&l판매&f]" with lore "&eCoin: &7%{_coin}%", "&eAmount: &71" and "&ePrice: &7$%getMoneyUnit({_coin.amount} * 1)%"
  set slot 11 of {trade.market.trade.inventory::%{_p}%} to 2 iron nugget named "&f[&a&l판매&f]" with lore "&eCoin: &7%{_coin}%", "&eAmount: &72" and "&ePrice: &7$%getMoneyUnit({_coin.amount} * 2)%"
  set slot 12 of {trade.market.trade.inventory::%{_p}%} to 4 iron nugget named "&f[&a&l판매&f]" with lore "&eCoin: &7%{_coin}%", "&eAmount: &74" and "&ePrice: &7$%getMoneyUnit({_coin.amount} * 4)%"
  set slot 13 of {trade.market.trade.inventory::%{_p}%} to 8 iron nugget named "&f[&a&l판매&f]" with lore "&eCoin: &7%{_coin}%", "&eAmount: &78" and "&ePrice: &7$%getMoneyUnit({_coin.amount} * 8)%"
  set slot 14 of {trade.market.trade.inventory::%{_p}%} to 16 iron nugget named "&f[&a&l판매&f]" with lore "&eCoin: &7%{_coin}%", "&eAmount: &716" and "&ePrice: &7$%getMoneyUnit({_coin.amount} * 16)%"
  set slot 15 of {trade.market.trade.inventory::%{_p}%} to 32 iron nugget named "&f[&a&l판매&f]" with lore "&eCoin: &7%{_coin}%", "&eAmount: &732" and "&ePrice: &7$%getMoneyUnit({_coin.amount} * 32)%"
  set slot 16 of {trade.market.trade.inventory::%{_p}%} to 64 iron nugget named "&f[&a&l판매&f]" with lore "&eCoin: &7%{_coin}%", "&eAmount: &764" and "&ePrice: &7$%getMoneyUnit({_coin.amount} * 64)%"
  set slots integers between 18 and 26 of {trade.market.trade.inventory::%{_p}%} to white glass named "&a"

  set {_pu} to uuid of {_p}

  set slot 17 of {trade.market.trade.inventory::%{_p}%} to chest named "&f[&a&l최대 수량 판매&f]" with lore "&eCoin: &7%{_coin}%", "&eAmount: &7Max (&e%getMoneyUnit({data.%{_pu}%.playerData::cryptocurrency.%{_coin}%})%&7)" and "&ePrice: &7$%getMoneyUnit({_coin.amount} * {data.%{_pu}%.playerData::cryptocurrency.%{_coin}%})%"
  if {cryptocurrency-data::%{_coin}%::1::percent_change_24h} parsed as a number is less than 0:
    set slot 9 of {trade.market.trade.inventory::%{_p}%} to a Paper named "&e%{cryptocurrency-data::%{_coin}%::1::symbol}% &7(&c%{cryptocurrency-data::%{_coin}%::1::percent_change_24h}%%%&7)" with lore "&e%{cryptocurrency-data::%{_coin}%::1::name}% &7┋ &aRank ##%{cryptocurrency-data::%{_coin}%::1::rank}%", "&8소유 코인: &a%getMoneyUnit({data.%{_pu}%.playerData::cryptocurrency.%{_coin}%})% &8┋ &a$%getMoneyUnit({data.%{_pu}%.playerData::cryptocurrency.%{_coin}%} * {_coin.amount})%" and "&8Price: &a$%getMoneyUnit({_coin.amount})%"
  if {cryptocurrency-data::%{_coin}%::1::percent_change_24h} parsed as a number is greater than or equal to 0:
    set slot 9 of {trade.market.trade.inventory::%{_p}%} to a Paper named "&e%{cryptocurrency-data::%{_coin}%::1::symbol}% &7(&a+%{cryptocurrency-data::%{_coin}%::1::percent_change_24h}%%%&7)" with lore "&e%{cryptocurrency-data::%{_coin}%::1::name}% &7┋ &aRank ##%{cryptocurrency-data::%{_coin}%::1::rank}%", "&8소유 코인: &a%getMoneyUnit({data.%{_pu}%.playerData::cryptocurrency.%{_coin}%})% &8┋ &a$%getMoneyUnit({data.%{_pu}%.playerData::cryptocurrency.%{_coin}%} * {_coin.amount})%" and "&8Price: &a$%getMoneyUnit({_coin.amount})%"

  wait 1 tick
  open {trade.market.trade.inventory::%{_p}%} to {_p}
