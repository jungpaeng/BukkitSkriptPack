options:
  CODE: playerData

on load:
  send "[%script%] Successfully loaded." to console
  set {dbDirect::playerData} to "plugins/Skript/scripts/DB/PlayerData"

on join:
  # 접속한 플레이어의 기본 정보를 저장
  set {info.user::%uuid of player%} to player
  set {info.name::%uuid of player%} to player's name
  set {info.uuid::%{info.name::%uuid of player%}%} to player's uuid

  # 접속한 플레이어의 접속 시간 저장
  set {playerInfo.join::%uuid of player%} to now

  # 최초 접속 / 최근 접속 시간 저장
  if {data.%uuid of player%.{@CODE}::firstLogin} is not set:
    set {data.%uuid of player%.{@CODE}::firstLogin} to {playerInfo.join::%uuid of player%} formatted with "YYMMdd-HHmmss"
  set {data.%uuid of player%.{@CODE}::lastLogin} to {playerInfo.join::%uuid of player%} formatted with "YYMMdd-HHmmss"

on quit:
  renewPlayerPlayTime(uuid of player)
  delete {playerInfo.join::%uuid of player%}

# 유저 마지막 로그인 이후 경과 시간
function getDayFromLastLogin(pu: text) :: number:
  set {_now} to now formatted with "YYMMdd"
  set {_lastLogin} to yaml value "lastlogin" from "%{dbDirect::playerData}%/%{_pu}%.yaml"

  loop 1 and 3, 5:
    # 마지막 접속 날자의 Year, Month, Day 저장
    set {_time::1} to subtext of {_lastLogin} between loop-value to loop-value + 1
    # 현재 시간의 Year, Month, Day 저장
    set {_time::2} to subtext of {_now} between loop-value to loop-value + 1

    # _day 변수에 마지막 로그인 이후 경과 시간을 저장
    if ({_time::1} is {_time::2}):
      if (loop-value is 1):
        add ( {_time::2} parsed as integer - {_time::1} parsed as integer ) * 365 to {_day}
      else if (loop-value is 3):
        add ( {_time::2} parsed as integer - {_time::1} parsed as integer ) * 30 to {_day}
      else if (loop-value is 5):
        add ( {_time::2} parsed as integer - {_time::1} parsed as integer ) to {_day}
  
  if {_day} is not set:
    set {_day} to 0

  return {_day}

# 활동시간 저장
function renewPlayerPlayTime(pu: text):
  set {_playTime.key} to "total daily"
  set {_playTime.key::*} to {_playTime.key} split at " "

  loop {_playTime.key::*}:
    set {_time.%loop-value%} to {data.%{_pu}%.{@CODE}::playTime.%loop-value%} parsed as timespan
    add difference between now and {playerInfo.join::%{_pu}%} to {_time.%loop-value%}
    set {data.%{_pu}%.{@CODE}::playTime.%loop-value%} to "%{_time.%loop-value%}%"
  
  set {playerInfo.join::%{_pu}%} to now

# 11시 59분, 12시에 플레이어 접속 시간을 초기화합니다.
every minute:
  if now formatted with "HH:mm" is "23:54":
    broadcast "&6[Server]&8> &75분 뒤, 플레이어 접속 시간을 초기화합니다..."
  if now formatted with "HH:mm" is "23:58":
    broadcast "&6[Server]&8> &71분 뒤, 플레이어 접속 시간을 초기화합니다..."

  if now formatted with "HH:mm" is "23:59" or "00:00":
    broadcast "&6[Server]&8> &7플레이어 접속 시간을 초기화합니다..."
    loop {info.user::*}:
      if {info.name::%loop-index%} parsed as player is online:
        wait 1 tick
        set {playerInfo.join::%loop-index%} to now
        set {data.%loop-index%.{@CODE}::lastLogin} to {playerInfo.join::%loop-index%} formatted with "YYMMdd-HHmmss"

      wait 1 tick
      delete {data.%loop-index%.{@CODE}::playTime.daily}


command /player-info [<offlineplayer>]:
  trigger:
    if player is op:
      if arg-1 is online:
        renewPlayerPlayTime(uuid of arg-1)
      send "<white>[<light blue>%arg-1%<light green>님의 기본 정보<white>]" to player

      send "최초 로그인 시간 : <light green>%{data.%uuid of arg-1%.{@CODE}::firstLogin}%"
      send "최근 로그인 시간 : <light green>%{data.%uuid of arg-1%.{@CODE}::lastLogin}%"

      send "오늘 플레이한 시간 : <light green>%{data.%uuid of arg-1%.{@CODE}::playTime.daily}%"
      send "총 플레이한 시간 : <light green>%{data.%uuid of arg-1%.{@CODE}::playTime.total}%"

      send "출석 일수 : <light green>%{data.%uuid of arg-1%.playerdata::dailyitems.today}%"